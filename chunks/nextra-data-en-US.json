{"/":{"title":"UINL (User Interface object-Notation Language)","data":{"":"UINL (User Interface object-Notation Language) is a machine-readable format for specifying user-interface changes.Main focus of UINL is in providing a functionally-equivalent task experience for human and computational users alike.\nIn its focus to make human software usable by machine agents, UINL aims to eliminate non-task-essential design choices (e.g. font type/size may be irrelevant for many task types), leaving those to be optionally specified via customizable templates (e.g. CSS).UINL messages adhere to JSON formatting, and can be deserialized with any standard JSON library.Deploying a UINL application is similar to deploying a web application, where UINL takes place of HTML as the language for UI description.\nMuch like HTML, UINL is a means for serializing task interface display and interactions.\nUnlike HTML documents, UINL messages are incremental updates to the display.\nWhereas HTML is focused on hypertext look and feel, UINL is focused on function, structure, and affordances of UI elements (though it enables style-sheets for detailed look&feel specification).","benefits-of-task-development-with-uinl#Benefits of task development with UINL:":"less code, more GUI\ncross-platform, web-friendly\nmillisecond precision time-stamps and timers\nconsistent cross-task API, allowing computational agents to interact with the same sw that that human users interact with","benefits-of-agent-development-for-uinl-compliant-tasks#Benefits of agent development for UINL-compliant tasks:":"consistent cross-task API, allowing computational agents to interact with the same sw that that human users interact with\nmillisecond precision user-time (with faster-than-real-time and slower-than-real-time capabilities)\ncross-platform, web-friendly\nlow bar of entry (i.e., core API for text-and-button tasks is minimal, additional UI feature handlers can be added to agent framework on a per-task basis)"}},"/full-specification":{"title":"Full Specification","data":{"sample-interaction#Sample Interaction":"","ui-app-initial-handshake#UI->APP: Initial Handshake":"Content: {\"t\":0}\nDescription: User-agent announces that it has loaded, and requests the initial display; t:0 indicates that UI clock time is at 0ms","app-ui-add-content#APP->UI: Add Content":"Content: {\"value\":[\"Hello World!\"],{\"class\":\"btn\",\"id\":\"click me\"}}\nShorthand: {\"v\":[\"Hello World!\"],{\"c\":\"btn\",\"id\":\"click me\"}}\nDescription: Text \"Hello World!\" and button \"click me\" are added to user display","ui-app-button-click#UI->APP: Button Click":"Content: {\"t\":3450,\"u\":\"click me\",\"v\":true}\nDescription: User clicks the button \"click me\" (3.45s after the UI loaded)","app-ui-close-application#APP->UI: Close Application":"Content: {\"value\":[\"Goodbye.\"],\"!state\":0}\nDescription: Display is cleared, text \"Goodbye.\" is added to the display; \"!state\":0 indicates that app is closing","protocol-specification#Protocol Specification":"","message-types#Message Types":"","1-ui-app-handshake#1. UI->APP Handshake":"Grammar: {(<<uiInfo>>)_\"t\":0,(<<uiInfo>>)_}\nDescription: First message sent from user-agent to app software once user-agent software is loaded and ready. No other UI->APP or APP->UI messages should precede this message.\nNote: Detailed <<uiInfo>> is voluntary but highly encouraged (especially \"userAgent\" and \"time\")","2-ui-app-action#2. UI->APP Action":"Grammar: {<<userProp>>,(<<userProp>>)*}\nDescription: User-side action/event (e.g., button-click, textbox edit)","3-app-ui-response#3. APP->UI Response":"Grammar: {(<<uiDirective>>,(<<uiDirective>>)*)?}\nDescription: App-driven updates to user display\nNote: By default UINL protocol is synchronous, requiring an APP->UI message in response to every UI->APP message\nEmpty Response: When there are no <<uiDirective>>'s (i.e., APP->UI message is {}) that signifies there are no display updates","ui-info#UI Info":"","useragent#userAgent":"Grammar: \"userAgent\":<<text>>\nDescription: Information about UI software (i.e., user-agent name, version)","window-dimensions#Window Dimensions":"Grammar: \"wh\":[<<number>>,<<number>>]\nDescription: Available width/height of application window (in pixels)","ip-address#IP Address":"Grammar: \"ip\":<<text>>\nDescription: User-agent ip address","url#URL":"Grammar: \"url\":<<text>>\nDescription: URL (if any) employed by UI to connect to the app","time#Time":"Grammar: \"time\":<<text>>\nDescription: Full user local time, including milliseconds and timezone offset, in ISO8601 format\nExample: \"2025-02-22T11:26:43.967-04:00\"","platform#Platform":"Grammar: \"platform\":<<text>>\nDescription: Information about where UI software is running (i.e., OS, framework)","system#System":"Grammar: \"system\":<<settings>>\nDescription: Any user-system information available (e.g., memory available, type of GPU, type of CPU)","screen#Screen":"Grammar: \"screen\":<<settings>>\nDescription: User screen information\nExample:\n{\n  \"availWidth\": 1168,\n  \"availHeight\": 692,\n  \"width\": 1229,\n  \"height\": 692,\n  \"colorDepth\": 24,\n  \"pixelDepth\": 24,\n  \"availLeft\": 0,\n  \"availTop\": 0,\n  \"orientation\": {\n    \"angle\": 0,\n    \"type\": \"landscape-primary\"\n  }\n}"}}}